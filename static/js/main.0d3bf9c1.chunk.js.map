{"version":3,"sources":["utils/init-firebase.js","contexts/AuthContext.js","components/Card.jsx","components/DividerWithText.jsx","components/Navlink.jsx","components/Navbar.jsx","components/Layout.jsx","pages/ForgotPasswordPage.jsx","pages/Homepage.jsx","hooks/useMounted.js","pages/Loginpage.jsx","pages/NotfoundPage.jsx","pages/Profilepage.jsx","pages/Registerpage.jsx","pages/ResetPasswordPage.jsx","components/AppRouter.jsx","App.js","index.js"],"names":["app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","AuthContext","createContext","currentUser","register","Promise","login","logout","signInWithGoogle","forgotPassword","resetPassword","useAuth","useContext","AuthContextProvider","children","useState","setCurrentUser","useEffect","unsubscribe","onAuthStateChanged","user","value","email","password","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","provider","GoogleAuthProvider","signInWithPopup","sendPasswordResetEmail","url","oobCode","newPassword","confirmPasswordReset","Provider","Card","props","bg","useColorModeValue","py","px","base","md","shadow","rounded","sm","DividerWithText","flexProps","align","color","flex","borderColor","as","fontWeight","Navlink","to","name","rest","isActive","useLocation","pathname","variant","colorScheme","Navbar","toggleColorMode","useColorMode","borderBottom","borderBottomColor","mb","justifyContent","maxW","mx","size","onClick","e","a","preventDefault","icon","Layout","ForgotPasswordPage","history","useHistory","toast","useToast","setEmail","textAlign","my","mt","form","onSubmit","description","status","duration","isClosable","console","log","message","spacing","id","type","autoComplete","required","onChange","target","fontSize","push","Homepage","span","fontStyle","textTransform","borderRadius","useMounted","mounted","useRef","current","Loginpage","setPassword","isSubmitting","setIsSubmitting","then","response","catch","error","finally","isLoading","isFullWidth","leftIcon","NotfoundPage","Profilepage","overflowX","pre","JSON","stringify","Registerpage","alert","ResetPasswordPage","query","URLSearchParams","search","get","setNewPassword","res","AppRouter","basename","exact","path","component","ProtectedRoute","location","state","from","App","customTheme","extendTheme","config","initialColorMode","useSystemColorMode","colors","primary","theme","purple","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAeMA,EAAMC,YAVW,CACrBC,OAAQC,0CACRC,WAAYD,4CACZE,UAAWF,4BACXG,cAAeH,wCACfI,kBAAmBJ,eACnBK,MAAOL,8CAMIM,EAAOC,YAAQV,G,OCJtBW,EAAcC,wBAAc,CAChCC,YAAa,KACbC,SAAU,kBAAMC,SAChBC,MAAO,kBAAMD,SACbE,OAAQ,kBAAMF,SACdG,iBAAkB,kBAAMH,SACxBI,eAAgB,kBAAMJ,SACtBK,cAAe,kBAAML,WAGVM,EAAU,kBAAMC,qBAAWX,IAEzB,SAASY,EAAT,GAA0C,IAAZC,EAAW,EAAXA,SAC3C,EAAwCC,mBAAS,MAAjD,mBAAQZ,EAAR,KAAqBa,EAArB,KAEAC,qBAAU,WACR,IAAMC,EAAcC,YAAmBpB,GAAM,SAAAqB,GAC3CJ,EAAeI,MAEjB,OAAO,WACLF,OAED,IA6BH,IAAMG,EAAQ,CACZlB,cACAC,SA7BF,SAAkBkB,EAAOC,GACvB,OAAOC,YAA+BzB,EAAMuB,EAAOC,IA6BnDjB,MA1BF,SAAegB,EAAOC,GACpB,OAAOE,YAA2B1B,EAAMuB,EAAOC,IA0B/ChB,OARF,WACE,OAAOmB,YAAQ3B,IAQfS,iBAxBF,WACE,IAAMmB,EAAW,IAAIC,IACrB,OAAOC,YAAgB9B,EAAM4B,IAuB7BlB,eApBF,SAAwBa,GACtB,OAAOQ,YAAuB/B,EAAMuB,EAAO,CACzCS,IAAK,iCAmBPrB,cAfF,SAAuBsB,EAASC,GAC9B,OAAOC,YAAqBnC,EAAMiC,EAASC,KAiB7C,OAAO,cAAChC,EAAYkC,SAAb,CAAsBd,MAAOA,EAA7B,SACJP,I,6HCxEQsB,EAAO,SAAAC,GAAK,OACvB,cAAC,IAAD,aACEC,GAAIC,YAAkB,QAAS,YAC/BC,GAAG,IACHC,GAAI,CAAEC,KAAM,IAAKC,GAAI,MACrBC,OAAO,OACPC,QAAS,CAAEC,GAAI,OACXT,K,mDCPO,SAASU,EAAgBV,GACtC,IAAQvB,EAA2BuB,EAA3BvB,SAAakC,EAArB,YAAmCX,EAAnC,GACA,OACE,eAAC,IAAD,yBAAMY,MAAM,SAASC,MAAM,YAAeF,GAA1C,cACE,cAAC,IAAD,CAAKG,KAAK,IAAV,SACE,cAAC,IAAD,CAASC,YAAY,mBAEvB,cAAC,IAAD,CACEC,GAAG,OACHZ,GAAG,IACHS,MAAOX,YAAkB,WAAY,YACrCe,WAAW,SAJb,SAMGxC,IAEH,cAAC,IAAD,CAAKqC,KAAK,IAAV,SACE,cAAC,IAAD,CAASC,YAAY,uB,uDCfd,SAASG,EAAT,GAAyC,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAASC,EAAQ,iBAG/CC,EAFWC,cAESC,WAAaL,EAEvC,OACE,cAAC,IAAD,CAAMA,GAAIA,EAAV,SACE,cAAC,IAAD,yBACEH,GAAG,IACHS,QAASH,EAAW,UAAY,QAChCI,YAAaJ,EAAW,UAAY,QAChCD,GAJN,aAMGD,OCJF,SAASO,IACd,IAAQC,EAAoBC,cAApBD,gBAER,EAAgCtD,IAAxBJ,EAAR,EAAQA,OAAQJ,EAAhB,EAAgBA,YAEhB,OACE,cAAC,IAAD,CACEgE,aAAa,MACbC,kBAAmB7B,YAAkB,WAAY,YACjD8B,GAAI,EAHN,SAKE,eAAC,IAAD,CAAQ7B,GAAI,EAAG8B,eAAe,WAAWC,KAAK,eAAeC,GAAG,OAAhE,UACE,cAACjB,EAAD,CAASC,GAAG,IAAIC,KAAK,yBAAyBgB,KAAK,OACnD,cAAC,IAAD,KACGtE,GAAe,cAACoD,EAAD,CAASC,GAAG,SAASC,KAAK,WACzCtD,GAAe,cAACoD,EAAD,CAASC,GAAG,YAAYC,KAAK,aAC7CtD,GAAe,cAACoD,EAAD,CAASC,GAAG,WAAWC,KAAK,YAC3CtD,GAAe,cAACoD,EAAD,CAASC,GAAG,kBAAkBC,KAAK,cAClDtD,GAAe,cAACoD,EAAD,CACfC,GAAG,UACHC,KAAK,SACLiB,QAAO,uCAAE,WAAMC,GAAN,SAAAC,EAAA,sDACPD,EAAEE,iBAEFtE,IAHO,2CAAF,wDAMT,cAAC,IAAD,CACEuD,QAAQ,UACRgB,KAAMvC,YAAkB,cAAC,IAAD,IAAW,cAAC,IAAD,KACnCmC,QAAST,EACT,aAAW,0BCxCd,SAASc,EAAO1C,GACrB,OACE,qCACE,cAAC2B,EAAD,IACA,cAAC,IAAD,CAAWO,KAAK,eAAhB,SAAgClC,EAAMvB,cCU7B,SAASkE,IACtB,IAAMC,EAAUC,cACRzE,EAAmBE,IAAnBF,eACF0E,EAAQC,cAEd,EAA0BrE,mBAAS,IAAnC,mBAAOO,EAAP,KAAc+D,EAAd,KAEA,OACE,eAACN,EAAD,WACE,cAAC,IAAD,CAASO,UAAU,SAASC,GAAI,GAAhC,6BAGA,eAAC,EAAD,CAAMhB,KAAK,KAAKC,GAAG,OAAOgB,GAAI,EAA9B,UACE,cAAC,IAAOC,KAAR,CACEC,SAAQ,uCAAE,WAAMf,GAAN,SAAAC,EAAA,6DACRD,EAAEE,iBADM,kBAIApE,EAAea,GAJf,OAKN6D,EAAM,CACJQ,YAAY,uBAAD,OAAyBrE,EAAzB,qCACXsE,OAAQ,UACRC,SAAU,IACVC,YAAY,IATR,gDAYNC,QAAQC,IAAI,KAAMC,SAClBd,EAAM,CACJQ,YAAa,KAAMM,QACnBL,OAAQ,QACRC,SAAU,IACVC,YAAY,IAjBR,yDAAF,sDADV,SAuBE,eAAC,IAAD,CAAOI,QAAQ,IAAf,UACE,eAAC,IAAD,CAAaC,GAAG,QAAhB,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACE1C,KAAK,QACL2C,KAAK,QACLC,aAAa,QACbC,UAAQ,EACRjF,MAAOC,EACPiF,SAAU,SAAA5B,GAAC,OAAIU,EAASV,EAAE6B,OAAOnF,aAGrC,cAAC,IAAD,CAAQ+E,KAAK,SAASrC,YAAY,OAAOU,KAAK,KAAKgC,SAAS,KAA5D,yBAKJ,cAAC1D,EAAD,CAAiBwC,GAAI,EAArB,gBACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAQzB,QAAQ,OAAOY,QAAS,kBAAMO,EAAQyB,KAAK,WAAnD,2B,+BCzDK,SAASC,IACtB,IAAQxG,EAAgBQ,IAAhBR,YAER,OACE,eAAC4E,EAAD,WACE,cAAC,IAAD,wBACA,cAAC,IAAD,CAAMQ,GAAI,EAAV,wCAAsCpF,KAEtC,eAAC,IAAD,qCAEE,cAAC,IAAOyG,KAAR,CACEtD,WAAW,QACXuD,UAAU,SACVJ,SAAS,MACTjC,GAAI,EAJN,gBAQA,cAAC,IAAD,CACElB,WAAW,QACXmD,SAAS,MACTjC,GAAI,EACJ/B,GAAI,EACJsB,YAAY,QALd,wBAUF,eAAC,IAAD,CAAa0C,SAAS,MAAMlB,GAAI,EAAhC,UACE,cAAC,IAAD,6DACA,cAAC,IAAD,6BACA,cAAC,IAAD,8BACA,cAAC,IAAD,yCACA,cAAC,IAAD,+BACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAMkB,SAAS,UAAf,0BADF,kCAIA,eAAC,IAAD,+BACmB,cAAC,IAAD,CAAMA,SAAS,MAAf,0BAEnB,cAAC,IAAD,kDACA,eAAC,IAAD,8CAEE,cAAC,IAAD,CACEA,SAAS,UACT1C,YAAY,OACZS,GAAI,EACJsC,cAAc,aACdC,aAAa,KALf,6BAWJ,cAAC,IAAD,CAAStC,KAAK,KAAKe,GAAI,GAAvB,oDAGA,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMhC,GAAG,kBAAT,0BAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAMA,GAAG,mBAAT,iC,OC7EK,SAASwD,IACtB,IAAMC,EAAUC,kBAAO,GASvB,OAPAjG,qBAAU,WAER,OADAgG,EAAQE,SAAU,EACX,WACLF,EAAQE,SAAU,KAEnB,IAEIF,ECYM,SAASG,KACtB,IAAMnC,EAAUC,cAChB,EAA4BnE,mBAAS,IAArC,mBAAQO,EAAR,KAAe+D,EAAf,KACA,EAAkCtE,mBAAS,IAA3C,mBAAQQ,EAAR,KAAkB8F,EAAlB,KACA,EAA0CtG,oBAAS,GAAnD,mBAAQuG,EAAR,KAAsBC,EAAtB,KACMpC,EAAQC,cAEd,EAAoCzE,IAA5BL,EAAR,EAAQA,MAAOE,EAAf,EAAeA,iBAETyG,EAAUD,IAEhB,OACE,eAACjC,EAAD,WACE,cAAC,IAAD,CAASO,UAAU,SAASC,GAAI,GAAhC,mBAGA,eAAC,EAAD,CAAMhB,KAAK,KAAKC,GAAG,OAAOgB,GAAI,EAA9B,UACE,cAAC,IAAOC,KAAR,CACEC,SAAQ,uCAAE,WAAMf,GAAN,SAAAC,EAAA,sDACRD,EAAEE,iBACGvD,GAAUC,GACb4D,EAAM,CACJQ,YAAa,wBACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,IAGhByB,GAAgB,GAChBjH,EAAMgB,EAAOC,GACZiG,MAAK,SAACC,GACL1B,QAAQC,IAAIyB,GACZxC,EAAQyB,KAAK,eAEdgB,OAAM,SAACC,GACN5B,QAAQC,IAAI2B,EAAM1B,SAClBd,EAAM,CACNQ,YAAagC,EAAM1B,QACnBL,OAAQ,QACRC,SAAU,IACVC,YAAY,OACT8B,SAAQ,WACXX,EAAQE,SAAWI,GAAgB,MAxB7B,2CAAF,sDADV,SA6BE,eAAC,IAAD,CAAOrB,QAAQ,IAAf,UACE,eAAC,IAAD,CAAaC,GAAG,QAAhB,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACE1C,KAAK,QACL2C,KAAK,QACLC,aAAa,QACbC,UAAQ,EACRjF,MAAOC,EACPiF,SAAU,SAAC5B,GAAD,OAAOU,EAASV,EAAE6B,OAAOnF,aAGvC,eAAC,IAAD,CAAa8E,GAAG,WAAhB,UACE,cAAC,IAAD,uBACA,cAAC,IAAD,CACE1C,KAAK,WACL2C,KAAK,WACLC,aAAa,WACbC,UAAQ,EACRjF,MAAOE,EACPgF,SAAU,SAAC5B,GAAD,OAAO0C,EAAY1C,EAAE6B,OAAOnF,aAI1C,cAAC,IAAD,CACEwG,UAAWP,EACXlB,KAAK,SACLrC,YAAY,UACZU,KAAK,KACLgC,SAAS,KALX,0BAWJ,eAAC,IAAD,CAAQnC,eAAe,gBAAgBiB,GAAI,EAA3C,UACE,cAAC,IAAD,CAAQzB,QAAQ,OAAhB,SACE,cAAC,IAAD,CAAMN,GAAG,mBAAT,gCAEF,cAAC,IAAD,CAAQM,QAAQ,OAAOY,QAAS,kBAAMO,EAAQyB,KAAK,cAAnD,yBAIF,cAAC3D,EAAD,CAAiBwC,GAAI,EAArB,gBACA,cAAC,IAAD,CACEzB,QAAQ,UACRgE,aAAW,EACX/D,YAAY,MACZgE,SAAU,cAAC,IAAD,IACVrD,QAAS,kBACPlE,IACGgH,MAAK,SAAApG,GAAI,OAAE2E,QAAQC,IAAI5E,MACvBsG,OAAM,SAAAC,GAAK,OAAI5B,QAAQC,IAAI2B,OARlC,uCC9GO,SAASK,KACtB,OACE,cAACjD,EAAD,UACE,cAAC,IAAD,+BCDS,SAASkD,KACtB,IAAQ9H,EAAgBQ,IAAhBR,YAER,OACE,eAAC4E,EAAD,WACE,eAAC,IAAD,0BAEE,cAAC,IAAD,CAAOhB,YAAY,QAAQ0C,SAAS,KAAKjC,GAAI,EAA7C,+BAKF,cAAC,IAAD,CAAWD,KAAK,eAAe2D,UAAU,OAAO1F,GAAI,EAApD,SACE,cAAC,IAAO2F,IAAR,UACGC,KAAKC,UAAUlI,EAAa,KAAM,UCA9B,SAASmI,KACtB,IAAMrD,EAAUC,cAChB,EAA4BnE,mBAAS,IAArC,mBAAQO,EAAR,KAAe+D,EAAf,KACA,EAAkCtE,mBAAS,IAA3C,mBAAQQ,EAAR,KAAkB8F,EAAlB,KACA,EAA0CtG,oBAAS,GAAnD,mBAAQuG,EAAR,KAAsBC,EAAtB,KACMpC,EAAQC,cAENhF,EAAaO,IAAbP,SAEF6G,EAAUD,IAEhB,OACE,eAACjC,EAAD,WACE,cAAC,IAAD,CAASO,UAAU,SAASC,GAAI,GAAhC,sBAGA,eAAC,EAAD,CAAMhB,KAAK,KAAKC,GAAG,OAAOgB,GAAI,EAA9B,UACE,cAAC,IAAOC,KAAR,CACEC,SAAQ,uCAAE,WAAMf,GAAN,SAAAC,EAAA,sDACRD,EAAEE,iBAEGvD,GAAUC,GACb4D,EAAM,CACJQ,YAAa,wBACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,IAGhByB,GAAgB,GAChBnH,EAASkB,EAAOC,GACfiG,MAAK,SAACC,GAAD,OAAc1B,QAAQC,IAAIyB,MAC/BC,OAAM,SAACC,GACN5B,QAAQC,IAAI2B,EAAM1B,SAClBd,EAAM,CACNQ,YAAagC,EAAM1B,QACnBL,OAAQ,QACRC,SAAU,IACVC,YAAY,OACT8B,SAAQ,WACXX,EAAQE,SAAWI,GAAgB,MAtB7B,2CAAF,sDADV,SA2BE,eAAC,IAAD,CAAOrB,QAAQ,IAAf,UACE,eAAC,IAAD,CAAaC,GAAG,QAAhB,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACE9E,MAAOC,EACPiF,SAAU,SAAC5B,GAAD,OAAOU,EAASV,EAAE6B,OAAOnF,QACnCoC,KAAK,QACL2C,KAAK,QACLC,aAAa,QACbC,UAAQ,OAGZ,eAAC,IAAD,CAAaH,GAAG,WAAhB,UACE,cAAC,IAAD,uBACA,cAAC,IAAD,CACE9E,MAAOE,EACPgF,SAAU,SAAC5B,GAAD,OAAO0C,EAAY1C,EAAE6B,OAAOnF,QACtCoC,KAAK,WACL2C,KAAK,WACLC,aAAa,WACbC,UAAQ,OAGZ,cAAC,IAAD,CACEuB,UAAWP,EACXlB,KAAK,SACLrC,YAAY,UACZU,KAAK,KACLgC,SAAS,KALX,0BAWJ,cAAC,IAAD,CAAQlB,GAAI,EAAZ,SACE,cAAC,IAAD,CAAQzB,QAAQ,OAAOY,QAAS,kBAAMO,EAAQyB,KAAK,WAAnD,qBAIF,cAAC3D,EAAD,CAAiBwC,GAAI,EAArB,gBACA,cAAC,IAAD,CACEzB,QAAQ,UACRgE,aAAW,EACX/D,YAAY,MACZgE,SAAU,cAAC,IAAD,IACVrD,QAAS,kBAAM6D,MAAM,wBALvB,uCCnFO,SAASC,KAEtB,IAAQ9H,EAAkBC,IAAlBD,cACFuE,EAAUC,cAEVuD,GATW7E,cACV,IAAI8E,gBAAgB9E,cAAc+E,SASzC5C,QAAQC,IAAIyC,EAAMG,IAAI,SACtB7C,QAAQC,IAAIyC,EAAMG,IAAI,YACtB7C,QAAQC,IAAIyC,EAAMG,IAAI,gBAEtB,IAAMzD,EAAQC,cAEd,EAAwCrE,qBAAxC,mBAAQkB,EAAR,KAAqB4G,EAArB,KAEA,OACE,eAAC9D,EAAD,WACE,cAAC,IAAD,CAASO,UAAU,SAASC,GAAI,GAAhC,4BAGA,cAAC,EAAD,CAAMhB,KAAK,KAAKC,GAAG,OAAOgB,GAAI,EAA9B,SACE,cAAC,IAAOC,KAAR,CACEC,SAAQ,uCAAE,WAAMf,GAAN,SAAAC,EAAA,sDACRD,EAAEE,iBAEFnE,EAAc+H,EAAMG,IAAI,WAAY3G,GACjCuF,MAAK,SAAAsB,GACJ/C,QAAQC,IAAI8C,GACZ3D,EAAM,CACJQ,YAAa,+CACbC,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEdb,EAAQyB,KAAK,aAEdgB,OAAM,SAAAC,GACL5B,QAAQC,IAAI2B,EAAM1B,SAClBd,EAAM,CACJQ,YAAagC,EAAM1B,QACnBL,OAAQ,QACRC,SAAU,IACVC,YAAY,OApBV,2CAAF,sDADV,SA0BE,eAAC,IAAD,CAAOI,QAAQ,IAAf,UACE,eAAC,IAAD,CAAaC,GAAG,WAAhB,UACE,cAAC,IAAD,2BACA,cAAC,IAAD,CACE9E,MAAOY,EACPsE,SAAU,SAAA5B,GAAC,OAAIkE,EAAelE,EAAE6B,OAAOnF,QACvC+E,KAAK,WACLC,aAAa,WACbC,UAAQ,OAGZ,cAAC,IAAD,CAAQF,KAAK,SAASrC,YAAY,UAAUU,KAAK,KAAKgC,SAAS,KAA/D,sCC5DG,SAASsC,GAAU1G,GAChC,OACE,cAAC,IAAD,CAAe2G,SAAUvJ,4CAAzB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOwJ,OAAK,EAACC,KAAK,IAAIC,UAAWxC,IACjC,cAACyC,GAAD,CAAgBH,OAAK,EAACC,KAAK,SAASC,UAAW/B,KAC/C,cAACgC,GAAD,CAAgBH,OAAK,EAACC,KAAK,YAAYC,UAAWb,KAClD,cAACc,GAAD,CAAgBH,OAAK,EAACC,KAAK,WAAWC,UAAWlB,KACjD,cAACmB,GAAD,CACEH,OAAK,EACLC,KAAK,mBACLC,UAAWnE,IAEb,cAACoE,GAAD,CACEH,OAAK,EACLC,KAAK,kBACLC,UAAWX,KAEb,cAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,UAAWnB,YAO3C,SAASoB,GAAe/G,GACtB,IAAQlC,EAAgBQ,IAAhBR,YACA+I,EAAS7G,EAAT6G,KACRnD,QAAQC,IAAI,OAAQkD,GACpB,IAQE,IARIG,EAAWzF,cAGjB,OAFAmC,QAAQC,IAAI,iBAAkBqD,EAASC,OAG5B,WAATJ,GACS,cAATA,GACS,qBAATA,GACS,oBAATA,EAEO/I,EACL,cAAC,IAAD,CAAUqD,GAAE,oBAAE6F,EAASC,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,aAEtC,cAAC,IAAD,eAAWlH,IAGRlC,EACL,cAAC,IAAD,eAAWkC,IAEX,cAAC,IAAD,CACEmB,GAAI,CACFK,SAAU,SACVyF,MAAO,CAAEC,KAAML,MCzDRM,OARf,WACE,OACE,cAAC3I,EAAD,UACE,cAACkI,GAAD,O,uCCGAU,GAAcC,aAAY,CAC9BC,OAAQ,CACNC,iBAAkB,QAClBC,oBAAoB,GAEtBC,OAAQ,CACNC,QAASC,SAAMF,OAAOG,UAI1BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,KAAD,CAAgBJ,MAAOP,GAAvB,UACE,cAAC,KAAD,CAAiBG,iBAAkBH,GAAYE,OAAOC,mBACtD,cAAC,GAAD,SAGJS,SAASC,eAAe,W","file":"static/js/main.0d3bf9c1.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth } from 'firebase/auth';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\nexport const auth = getAuth(app);","import { createContext, useContext, useEffect, useState } from 'react'\nimport { auth } from '../utils/init-firebase'\nimport { \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword,\n  onAuthStateChanged,\n  signOut,\n  GoogleAuthProvider,\n  signInWithPopup,\n  sendPasswordResetEmail,\n  confirmPasswordReset\n} from 'firebase/auth'\n\nconst AuthContext = createContext({\n  currentUser: null,\n  register: () => Promise,\n  login: () => Promise,\n  logout: () => Promise,\n  signInWithGoogle: () => Promise,\n  forgotPassword: () => Promise,\n  resetPassword: () => Promise,\n})\n\nexport const useAuth = () => useContext(AuthContext)\n\nexport default function AuthContextProvider({children}) {\n  const [ currentUser, setCurrentUser ] = useState(null)\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      setCurrentUser(user)\n    })\n    return () => {\n      unsubscribe()\n    }\n  }, [])\n\n  function register(email, password) {\n    return createUserWithEmailAndPassword(auth, email, password)\n  }\n\n  function login(email, password) {\n    return signInWithEmailAndPassword(auth, email, password)\n  }\n\n  function signInWithGoogle() {\n    const provider = new GoogleAuthProvider()\n    return signInWithPopup(auth, provider)\n  }\n\n  function forgotPassword(email) {\n    return sendPasswordResetEmail(auth, email, {\n      url: 'http://localhost:3000/login',\n    })\n  }\n\n  function resetPassword(oobCode, newPassword) {\n    return confirmPasswordReset(auth, oobCode, newPassword)\n  }\n\n  function logout() {\n    return signOut(auth)\n  }\n  \n  const value = {\n    currentUser,\n    register,\n    login,\n    logout,\n    signInWithGoogle,\n    forgotPassword,\n    resetPassword\n  }\n\n  return <AuthContext.Provider value={value}>\n    {children}\n  </AuthContext.Provider>\n}","import { Box, useColorModeValue } from '@chakra-ui/react'\nimport * as React from 'react'\n\nexport const Card = props => (\n  <Box\n    bg={useColorModeValue('white', 'gray.700')}\n    py='8'\n    px={{ base: '4', md: '10' }}\n    shadow='base'\n    rounded={{ sm: 'lg' }}\n    {...props}\n  />\n)\n","import { Flex, Box, Divider, useColorModeValue, Text } from '@chakra-ui/react'\nimport React from 'react'\n\nexport default function DividerWithText(props) {\n  const { children, ...flexProps } = props\n  return (\n    <Flex align='center' color='gray.300' {...flexProps}>\n      <Box flex='1'>\n        <Divider borderColor='currentcolor' />\n      </Box>\n      <Text\n        as='span'\n        px='3'\n        color={useColorModeValue('gray.600', 'gray.400')}\n        fontWeight='medium'\n      >\n        {children}\n      </Text>\n      <Box flex='1'>\n        <Divider borderColor='currentcolor' />\n      </Box>\n    </Flex>\n  )\n}\n","import React from 'react'\nimport { NavLink as Link, useLocation } from 'react-router-dom'\nimport { Button } from '@chakra-ui/react'\n\nexport default function Navlink({ to, name, ...rest }) {\n  const location = useLocation()\n\n  const isActive = location.pathname === to\n\n  return (\n    <Link to={to}>\n      <Button\n        as='a'\n        variant={isActive ? 'outline' : 'ghost'}\n        colorScheme={isActive ? 'primary' : 'gray'}\n        {...rest}\n      >\n        {name}\n      </Button>\n    </Link>\n  )\n}\n","import {\n  Box,\n  HStack,\n  IconButton,\n  Spacer,\n  useColorMode,\n  useColorModeValue,\n} from '@chakra-ui/react'\nimport React from 'react'\nimport { FaMoon, FaSun } from 'react-icons/fa'\nimport Navlink from './Navlink'\nimport { useAuth } from '../contexts/AuthContext'\n\nexport function Navbar() {\n  const { toggleColorMode } = useColorMode()\n\n  const { logout, currentUser } = useAuth()\n\n  return (\n    <Box\n      borderBottom='2px'\n      borderBottomColor={useColorModeValue('gray.100', 'gray.700')}\n      mb={4}\n    >\n      <HStack py={4} justifyContent='flex-end' maxW='container.lg' mx='auto'>\n        <Navlink to='/' name='Firbase Authentication' size='lg' />\n        <Spacer />\n        { !currentUser && <Navlink to='/login' name='Login' /> }\n        { !currentUser && <Navlink to='/register' name='Register' /> }\n        { currentUser && <Navlink to='/profile' name='Profile' /> }\n        { currentUser && <Navlink to='/protected-page' name='Protected' />}\n        { currentUser && <Navlink\n          to='/logout'\n          name='Logout'\n          onClick={async e => {\n            e.preventDefault()\n            \n            logout()\n          }}\n        /> }\n        <IconButton\n          variant='outline'\n          icon={useColorModeValue(<FaSun />, <FaMoon />)}\n          onClick={toggleColorMode}\n          aria-label='toggle-dark-mode'\n        />\n      </HStack>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { Container } from '@chakra-ui/react'\nimport { Navbar } from './Navbar'\n\nexport function Layout(props) {\n  return (\n    <>\n      <Navbar />\n      <Container maxW='container.lg'>{props.children}</Container>\n    </>\n  )\n}\n","import {\n  Button,\n  Center,\n  chakra,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  useToast,\n} from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Card } from '../components/Card'\nimport DividerWithText from '../components/DividerWithText'\nimport { Layout } from '../components/Layout'\nimport { useAuth } from '../contexts/AuthContext'\n\nexport default function ForgotPasswordPage() {\n  const history = useHistory()\n  const { forgotPassword } = useAuth()\n  const toast = useToast()\n\n  const [email, setEmail] = useState('')\n\n  return (\n    <Layout>\n      <Heading textAlign='center' my={12}>\n        Forgot password\n      </Heading>\n      <Card maxW='md' mx='auto' mt={4}>\n        <chakra.form\n          onSubmit={async e => {\n            e.preventDefault()\n            // your login logic here\n            try {\n              await forgotPassword(email)\n              toast({\n                description: `An email is sent to ${email} for password reset instructions.`,\n                status: 'success',\n                duration: 5000,\n                isClosable: true,\n              })\n            } catch (error) {\n              console.log(error.message)\n              toast({\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n              })\n            }\n          }}\n        >\n          <Stack spacing='6'>\n            <FormControl id='email'>\n              <FormLabel>Email address</FormLabel>\n              <Input\n                name='email'\n                type='email'\n                autoComplete='email'\n                required\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n              />\n            </FormControl>\n            <Button type='submit' colorScheme='pink' size='lg' fontSize='md'>\n              Submit\n            </Button>\n          </Stack>\n        </chakra.form>\n        <DividerWithText my={6}>OR</DividerWithText>\n        <Center>\n          <Button variant='link' onClick={() => history.push('/login')}>\n            Login\n          </Button>\n        </Center>\n      </Card>\n    </Layout>\n  )\n}\n","import {\n  Badge,\n  chakra,\n  Code,\n  Heading,\n  List,\n  ListItem,\n  OrderedList,\n  Tag,\n  Text,\n} from '@chakra-ui/react'\nimport React from 'react'\nimport { Layout } from '../components/Layout'\nimport { Link } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\n\nexport default function Homepage() {\n  const { currentUser } = useAuth()\n\n  return (\n    <Layout>\n      <Heading>Home page</Heading>\n      <Text my={6}>{`The current user is: ${currentUser}`}</Text>\n\n      <Heading>\n        Firebase Authentication\n        <chakra.span\n          fontWeight='black'\n          fontStyle='italic'\n          fontSize='9xl'\n          mx={2}\n        >\n          v9\n        </chakra.span>\n        <Badge\n          fontWeight='black'\n          fontSize='4xl'\n          mx={2}\n          px={2}\n          colorScheme='green'\n        >\n          NEW API\n        </Badge>\n      </Heading>\n      <OrderedList fontSize='3xl' my={4}>\n        <ListItem>Email password authentication (Register/Login)</ListItem>\n        <ListItem>Google Sign in</ListItem>\n        <ListItem>Forgot Password</ListItem>\n        <ListItem>Custom Reset password page</ListItem>\n        <ListItem>Protected routes</ListItem>\n        <ListItem>\n          <Code fontSize='inherit'> Redirect TO</Code> or Back (keeping the\n          state)\n        </ListItem>\n        <ListItem>\n          custom Auth Hook <Code fontSize='3xl'>useAuth()</Code>\n        </ListItem>\n        <ListItem>Loading indicators while sign-in/up</ListItem>\n        <ListItem>\n          Dark Mode enabled template using\n          <Badge\n            fontSize='inherit'\n            colorScheme='teal'\n            mx={2}\n            textTransform='capitalize'\n            borderRadius='md'\n          >\n            Chakra UI\n          </Badge>\n        </ListItem>\n      </OrderedList>\n      <Heading size='md' mt={20}>\n        Some other links (only for reference):\n      </Heading>\n      <List>\n        <ListItem>\n          <Link to='/reset-password'>reset page</Link>\n        </ListItem>\n        <ListItem>\n          <Link to='/forgot-password'>forgot page</Link>\n        </ListItem>\n      </List>\n    </Layout>\n  )\n}\n","import React, { useEffect, useRef } from 'react'\n\nexport default function useMounted() {\n  const mounted = useRef(false)\n\n  useEffect(() => {\n    mounted.current = true\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n  \n  return mounted\n}\n","import {\n  Button,\n  chakra,\n  FormControl,\n  FormLabel,\n  Heading,\n  HStack,\n  Input,\n  Stack,\n  useToast,\n  Text,\n  Box,\n  Flex,\n} from '@chakra-ui/react'\nimport { cleanup } from '@testing-library/react'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { FaGoogle } from 'react-icons/fa'\nimport { Link, useHistory } from 'react-router-dom'\nimport { Card } from '../components/Card'\nimport DividerWithText from '../components/DividerWithText'\nimport { Layout } from '../components/Layout'\nimport { useAuth } from '../contexts/AuthContext'\nimport useMounted from '../hooks/useMounted'\n\nexport default function Loginpage() {\n  const history = useHistory()\n  const [ email, setEmail ] = useState('')\n  const [ password, setPassword ] = useState('')\n  const [ isSubmitting, setIsSubmitting ] = useState(false)\n  const toast = useToast();\n\n  const { login, signInWithGoogle } = useAuth()\n\n  const mounted = useMounted()\n\n  return (\n    <Layout>\n      <Heading textAlign='center' my={12}>\n        Login\n      </Heading>\n      <Card maxW='md' mx='auto' mt={4}>\n        <chakra.form\n          onSubmit={async e => {\n            e.preventDefault()\n            if( !email || !password ) {\n              toast({\n                description: \"Credentails not valid\",\n                status: 'error',\n                duration: 5000,\n                isClosable: true\n              })\n            }\n            setIsSubmitting(true)\n            login(email, password)\n            .then((response) => {\n              console.log(response)\n              history.push('/profile')\n            })\n            .catch((error) => {\n              console.log(error.message)\n              toast({\n              description: error.message,\n              status: 'error',\n              duration: 5000,\n              isClosable: true\n            })}).finally(() => {\n              mounted.current && setIsSubmitting(false)\n            })\n          }}\n        >\n          <Stack spacing='6'>\n            <FormControl id='email'>\n              <FormLabel>Email address</FormLabel>\n              <Input \n                name='email' \n                type='email' \n                autoComplete='email' \n                required \n                value={email} \n                onChange={(e) => setEmail(e.target.value)} \n              />\n            </FormControl>\n            <FormControl id='password'>\n              <FormLabel>Password</FormLabel>\n              <Input\n                name='password'\n                type='password'\n                autoComplete='password'\n                required\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </FormControl>\n            {/* <PasswordField /> */}\n            <Button \n              isLoading={isSubmitting}\n              type='submit' \n              colorScheme='primary' \n              size='lg' \n              fontSize='md'\n            >\n              Sign in\n            </Button>\n          </Stack>\n        </chakra.form>\n        <HStack justifyContent='space-between' my={4}>\n          <Button variant='link'>\n            <Link to='/forgot-password'>Forgot password?</Link>\n          </Button>\n          <Button variant='link' onClick={() => history.push('/register')}>\n            Register\n          </Button>\n        </HStack>\n        <DividerWithText my={6}>OR</DividerWithText>\n        <Button\n          variant='outline'\n          isFullWidth\n          colorScheme='red'\n          leftIcon={<FaGoogle />}\n          onClick={() => \n            signInWithGoogle()\n              .then(user=>console.log(user))\n              .catch(error => console.log(error))\n          }\n        >\n          Sign in with Google\n        </Button>\n      </Card>\n    </Layout>\n  )\n}\n","import { Heading } from '@chakra-ui/react'\nimport React from 'react'\nimport { Layout } from '../components/Layout'\n\nexport default function NotfoundPage() {\n  return (\n    <Layout>\n      <Heading>Not found page</Heading>\n    </Layout>\n  )\n}\n","import React from 'react'\nimport { Layout } from '../components/Layout'\nimport { Badge, chakra, Code, Container, Heading } from '@chakra-ui/react'\nimport { Card } from '../components/Card'\nimport { useAuth } from '../contexts/AuthContext'\n\nexport default function Profilepage() {\n  const { currentUser } = useAuth();\n\n  return (\n    <Layout>\n      <Heading>\n        Profile page\n        <Badge colorScheme='green' fontSize='lg' mx={4}>\n          Protected Page\n        </Badge>\n      </Heading>\n\n      <Container maxW='container.lg' overflowX='auto' py={4}>\n        <chakra.pre>\n          {JSON.stringify(currentUser, null, 2)}\n        </chakra.pre>\n      </Container>\n    </Layout>\n  )\n}\n","import {\n  Button,\n  Center,\n  chakra,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  useToast,\n} from '@chakra-ui/react'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { FaGoogle } from 'react-icons/fa'\nimport { useHistory } from 'react-router-dom'\nimport { Card } from '../components/Card'\nimport DividerWithText from '../components/DividerWithText'\nimport { Layout } from '../components/Layout'\nimport { useAuth } from '../contexts/AuthContext'\nimport useMounted from '../hooks/useMounted'\n\nexport default function Registerpage() {\n  const history = useHistory()\n  const [ email, setEmail ] = useState('')\n  const [ password, setPassword ] = useState('')\n  const [ isSubmitting, setIsSubmitting ] = useState(false)\n  const toast = useToast();\n\n  const { register } = useAuth()\n\n  const mounted = useMounted()\n\n  return (\n    <Layout>\n      <Heading textAlign='center' my={12}>\n        Register\n      </Heading>\n      <Card maxW='md' mx='auto' mt={4}>\n        <chakra.form\n          onSubmit={async e => {\n            e.preventDefault()\n            // your register logic here\n            if( !email || !password ) {\n              toast({\n                description: \"Credentails not valid\",\n                status: 'error',\n                duration: 5000,\n                isClosable: true\n              })\n            }\n            setIsSubmitting(true)\n            register(email, password)\n            .then((response) => console.log(response))\n            .catch((error) => {\n              console.log(error.message)\n              toast({\n              description: error.message,\n              status: 'error',\n              duration: 5000,\n              isClosable: true\n            })}).finally(() => {\n              mounted.current && setIsSubmitting(false)\n            })\n          }}\n        >\n          <Stack spacing='6'>\n            <FormControl id='email'>\n              <FormLabel>Email address</FormLabel>\n              <Input \n                value={email} \n                onChange={(e) => setEmail(e.target.value)} \n                name='email' \n                type='email' \n                autoComplete='email' \n                required \n              />\n            </FormControl>\n            <FormControl id='password'>\n              <FormLabel>Password</FormLabel>\n              <Input\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                name='password'\n                type='password'\n                autoComplete='password'\n                required\n              />\n            </FormControl>\n            <Button \n              isLoading={isSubmitting}\n              type='submit' \n              colorScheme='primary' \n              size='lg' \n              fontSize='md'\n            >\n              Sign up\n            </Button>\n          </Stack>\n        </chakra.form>\n        <Center my={4}>\n          <Button variant='link' onClick={() => history.push('/login')}>\n            Login\n          </Button>\n        </Center>\n        <DividerWithText my={6}>OR</DividerWithText>\n        <Button\n          variant='outline'\n          isFullWidth\n          colorScheme='red'\n          leftIcon={<FaGoogle />}\n          onClick={() => alert('sign in with google')}\n        >\n          Sign in with Google\n        </Button>\n      </Card>\n    </Layout>\n  )\n}\n","import {\n  Button,\n  chakra,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  useToast,\n} from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport { Card } from '../components/Card'\nimport { Layout } from '../components/Layout'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\n\nfunction useQuery() {\n  const location = useLocation()\n  return new URLSearchParams(useLocation().search)\n}\n\nexport default function ResetPasswordPage() {\n\n  const { resetPassword } = useAuth()\n  const history = useHistory()\n\n  const query = useQuery()\n  console.log(query.get('mode'))\n  console.log(query.get('oobCode'))\n  console.log(query.get('continueUrl'))\n\n  const toast = useToast()\n\n  const [ newPassword, setNewPassword ] = useState()\n\n  return (\n    <Layout>\n      <Heading textAlign='center' my={12}>\n        Reset password\n      </Heading>\n      <Card maxW='md' mx='auto' mt={4}>\n        <chakra.form\n          onSubmit={async e => {\n            e.preventDefault()\n            // handle reset password\n            resetPassword(query.get('oobCode'), newPassword)\n              .then(res => {\n                console.log(res)\n                toast({\n                  description: 'Password ha been changed, you can login now.',\n                  status: 'success',\n                  duration: 9000,\n                  isClosable: true\n                })\n                history.push('/login')\n              })\n              .catch(error => {\n                console.log(error.message)\n                toast({\n                  description: error.message,\n                  status: 'error',\n                  duration: 9000,\n                  isClosable: true\n                })\n              })\n          }}\n        >\n          <Stack spacing='6'>\n            <FormControl id='password'>\n              <FormLabel>New password</FormLabel>\n              <Input \n                value={newPassword} \n                onChange={e => setNewPassword(e.target.value)}\n                type='password' \n                autoComplete='password' \n                required \n              />\n            </FormControl>\n            <Button type='submit' colorScheme='primary' size='lg' fontSize='md'>\n              Reset password\n            </Button>\n          </Stack>\n        </chakra.form>\n      </Card>\n    </Layout>\n  )\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n  useLocation,\n} from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\nimport ForgotPasswordPage from '../pages/ForgotPasswordPage'\nimport Homepage from '../pages/Homepage'\nimport Loginpage from '../pages/Loginpage'\nimport NotfoundPage from '../pages/NotfoundPage'\nimport Profilepage from '../pages/Profilepage'\nimport Registerpage from '../pages/Registerpage'\nimport ResetPasswordPage from '../pages/ResetPasswordPage'\n\nexport default function AppRouter(props) {\n  return (\n    <BrowserRouter basename={process.env.REACT_APP_AUTH_DOMAIN}>\n      <Router>\n        <Switch>\n          <Route exact path='/' component={Homepage} />\n          <ProtectedRoute exact path='/login' component={Loginpage} />\n          <ProtectedRoute exact path='/register' component={Registerpage} />\n          <ProtectedRoute exact path='/profile' component={Profilepage} />\n          <ProtectedRoute\n            exact\n            path='/forgot-password'\n            component={ForgotPasswordPage}\n          />\n          <ProtectedRoute\n            exact\n            path='/reset-password'\n            component={ResetPasswordPage}\n          />\n          <Route exact path='*' component={NotfoundPage} />\n        </Switch>\n      </Router>\n    </BrowserRouter>\n  )\n}\n\nfunction ProtectedRoute(props) {\n  const { currentUser } = useAuth()\n  const { path } = props\n  console.log('path', path)\n  const location = useLocation()\n  console.log('location state', location.state)\n\n  if (\n    path === '/login' ||\n    path === '/register' ||\n    path === '/forgot-password' ||\n    path === '/reset-password'\n  ) {\n    return currentUser ? (\n      <Redirect to={location.state?.from ?? '/profile'} />\n    ) : (\n      <Route {...props} />\n    )\n  }\n  return currentUser ? (\n    <Route {...props} />\n  ) : (\n    <Redirect\n      to={{\n        pathname: '/login',\n        state: { from: path },\n      }}\n    />\n  )\n}","import React from 'react'\nimport AppRouter from './components/AppRouter'\nimport AuthContextProvider from './contexts/AuthContext'\n\nfunction App() {\n  return (\n    <AuthContextProvider>\n      <AppRouter />\n    </AuthContextProvider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport {\n  ChakraProvider,\n  ColorModeScript,\n  extendTheme,\n  theme,\n} from '@chakra-ui/react'\n\nconst customTheme = extendTheme({\n  config: {\n    initialColorMode: 'light',\n    useSystemColorMode: false,\n  },\n  colors: {\n    primary: theme.colors.purple,\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={customTheme}>\n      <ColorModeScript initialColorMode={customTheme.config.initialColorMode} />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}